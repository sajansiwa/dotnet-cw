@page "/inventory-details"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Product Stocks Details</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Product Name
                    <a class='btn text-@(_sortBy == "Name" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("Name")'>
                        <span class='oi oi-sort-@(_sortBy == "Name" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>

            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "Quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("Quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "Quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>

            <th>
                <div class="d-flex">
                    Date and Time
                    <a class='btn text-@(_sortBy == "LastTakenOut" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("LastTakenOut")'>
                        <span class='oi oi-sort-@(_sortBy == "LastTakenOut" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>

            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Item> itemsList = _todos;
            if (_sortBy == "Name")
            {
                itemsList = _sortDirection == "ascending" ? itemsList.OrderBy(t => t.Name) : itemsList.OrderByDescending(t =>
                t.Name);
            }

            else if (_sortBy == "Quantity")
            {
                itemsList = _sortDirection == "ascending" ? itemsList.OrderBy(t => t.Quantity) : itemsList.OrderByDescending(t =>
                t.Quantity);
            }

            else if (_sortBy == "LastTakenOut")
            {
                itemsList = _sortDirection == "ascending" ? itemsList.OrderBy(t => t.LastTakenOut) : itemsList.OrderByDescending(t =>
                t.LastTakenOut);
            }

            foreach (var item in itemsList)
            {
                <tr>
                   
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>
                        <p class="small mb-0">
                            @(item.LastTakenOut != DateTime.MinValue ? item.LastTakenOut.ToString("dd'/'MM'/'yyyy h:mm tt") : "---")
                        </p>
                    </td>
                    <td>
                        <button class="btn btn-outline-success" type="button"
                            @onclick="()=>OpenAddQuantity(item)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                       <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteTodoDialog(item)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>



@if (_showDeleteTodoDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteTodo.Name</strong>?</p>
        @if (!string.IsNullOrEmpty(_deleteTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTodoErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTodoDialog { get; set; }
    private bool _showDeleteTodoDialog { get; set; }
    private List<Item> _todos { get; set; }
    private Item _deleteTodo { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTodoErrorMessage { get; set; }
    private string _deleteTodoErrorMessage { get; set; }
    private Item _todoModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private User user = UsersService.GetCurrentUser();

    protected override void OnInitialized()
    {
        _todos = ItemService.GetAllItems();
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Product";
        _dialogOkLabel = "Add";
        _todoModel = new Item();
        _todoModel.Id = Guid.Empty;
        _showEditTodoDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _todos = ItemService.GetAllItems().Where(t =>
            t.Name.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _todos = ItemService.GetAllItems();
        }
    }

    private void OpenDeleteTodoDialog(Item todoItem)
    {
        _deleteTodo = todoItem;
        _showDeleteTodoDialog = true;
    }

    private void OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteTodoDialog = false;
            _deleteTodo = null;
        }
        else
        {
            try
            {
                _deleteTodoErrorMessage = "";
                _todos = ItemService.DeleteItem( _deleteTodo.Id);
                _showDeleteTodoDialog = false;
                _deleteTodo = null;
            }
            catch (Exception e)
            {
                _deleteTodoErrorMessage = e.Message;
            }
        }
    }
}
